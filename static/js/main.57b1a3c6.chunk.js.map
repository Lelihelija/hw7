{"version":3,"sources":["redux/reducers/add-user-reducer.js","redux/reducers/get-tweet-reducer.js","redux/reducers/index.js","redux/types.js","redux/store.js","components/top-panel/top-panel.js","redux/actions/add-user-action.js","components/users/users.js","components/add-user/add-user.js","redux/actions/add-tweet-action.js","components/tweets-list/tweets-list.js","redux/actions/post-tweet-action.js","components/add-tweet/add-tweet.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","users","error","tweets","rootReducer","combineReducers","user","state","action","type","payload","tweet","store","createStore","applyMiddleware","thunk","logger","TopPanel","className","MENU","map","menuItem","index","key","to","path","title","fetchUsersRequest","fetchUsersSuccess","fetchUsersFailure","fetchUsersAction","dispatch","a","axios","get","then","response","data","catch","errorMsg","message","UserContainer","this","props","src","avatar","alt","name","username","Component","connect","console","log","AddUser","value","isValid","validationRules","regExp","selectName","event","setState","currentTarget","usernameValidation","test","String","selectUsername","target","selectAvatar","resetInputs","addNewUser","newUserData","placeholder","onChange","bind","onClick","fetchTweetsRequest","fetchTweetsSuccess","fetchTweetsFail","fetchTweetsAction","TweetsList","i","content","image","postTweetThunkCreator","post","AddTweet","selectContent","selectImage","addNewTweet","id","component","App","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57b1a3c6.chunk.js","sourcesContent":["// import axios from \"axios\";\r\nimport {\r\n  FETCH_USERS_REQUEST,\r\n  FETCH_USERS_SUCCESS,\r\n  FETCH_USERS_FAIL\r\n} from '../types';\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  users: [],\r\n  error: '',\r\n};\r\n\r\nconst getUsersReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n      case FETCH_USERS_REQUEST:\r\n        return {\r\n          ...state.users,\r\n          loading: true,\r\n       };\r\n      case FETCH_USERS_SUCCESS:\r\n        return {\r\n          loading: false,\r\n          users: action.payload,\r\n          error: '',\r\n       };\r\n      case FETCH_USERS_FAIL:\r\n        return {\r\n          loading: false,\r\n          users: [],\r\n          error: action.payload,\r\n       };\r\n      default: return state;\r\n    };\r\n};\r\n\r\n\r\n\r\nexport { getUsersReducer };\r\n","import {\r\n    FETCH_TWEETS_REQUEST,\r\n    FETCH_TWEETS_SUCCESS,\r\n    FETCH_TWEETS_FAIL\r\n} from '../types';\r\n\r\nexport const initialState = {\r\n    loading: false,\r\n    tweets: [],\r\n    error: '',\r\n};\r\n\r\nexport const getTweetReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TWEETS_REQUEST:\r\n        return {\r\n            ...state.tweets,\r\n            loading: true,\r\n            error: '',\r\n        };\r\n        case FETCH_TWEETS_SUCCESS:\r\n        return {\r\n            tweets: action.payload,\r\n            loading: false,\r\n            error: '',\r\n        };\r\n        case FETCH_TWEETS_FAIL:\r\n        return {\r\n            users: [],\r\n            loading: false,\r\n            error: action.payload,\r\n        };\r\n        default: return state;\r\n    };\r\n};\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { getUsersReducer } from './add-user-reducer';\r\nimport { getTweetReducer } from './get-tweet-reducer';\r\n\r\nexport const rootReducer = combineReducers ({\r\n    user: getUsersReducer,\r\n    tweet: getTweetReducer,\r\n})\r\n\r\n","export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST';\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\nexport const FETCH_USERS_FAIL = 'FETCH_USERS_FAILURE';\r\n\r\nexport const FETCH_TWEETS_REQUEST = 'FETCH_TWEETS_REQUEST';\r\nexport const FETCH_TWEETS_SUCCESS = 'FETCH_TWEETS_SUCCESS';\r\nexport const FETCH_TWEETS_FAIL = 'FETCH_TWEETS_FAIL';\r\n\r\nexport const POST_TWEET_REQUEST = 'POST_TWEET_REQUEST';\r\nexport const POST_TWEET_SUCCESS = 'POST_TWEET_SUCCESS';\r\nexport const POST_TWEET_FAIL = 'POST_TWEET_FAIL';\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { logger } from 'redux-logger';\r\nimport { rootReducer } from \"./reducers/index\";\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunk, logger),\r\n\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport './styles.css';\r\nimport { MENU } from '../../App';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst TopPanel = () => {\r\n\r\n        return (\r\n            <div className=\"top-panel-wrapper\">\r\n                <ul className=\"navigation-menu\">\r\n                    {MENU.map((menuItem, index) => (\r\n                        <li key={index} className=\"nav-item\">\r\n                            <NavLink to={menuItem.path}\r\n                                    className=\"top-panel-btn\">\r\n                                {menuItem.title}\r\n                            </NavLink>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default TopPanel;","import axios from 'axios';\r\nimport {\r\n    FETCH_USERS_REQUEST,\r\n    FETCH_USERS_SUCCESS,\r\n    FETCH_USERS_FAIL\r\n} from '../types';\r\n\r\nexport const fetchUsersRequest = () => {\r\n    return {\r\n        type: FETCH_USERS_REQUEST,\r\n    }\r\n}\r\n\r\nexport const fetchUsersSuccess = (users) => {\r\n    return {\r\n        type: FETCH_USERS_SUCCESS,\r\n        payload: users,\r\n    }\r\n}\r\n\r\nexport const fetchUsersFailure = (error) => {\r\n    return {\r\n        type: FETCH_USERS_FAIL,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nexport const fetchUsersAction = () => {\r\n    return async (dispatch) => {\r\n        dispatch(fetchUsersRequest)\r\n        await axios.get(`https://cors-anywhere.herokuapp.com/http://domer.tech:9999/users`)\r\n        .then((response) => {\r\n            const users = response.data.data;\r\n            dispatch(fetchUsersSuccess(users));\r\n        })\r\n        .catch((error) => {\r\n            const errorMsg = error.message;\r\n            dispatch(fetchUsersFailure(errorMsg));\r\n        })\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { fetchUsersAction } from '../../redux/actions/add-user-action';\r\nimport './styles.css';\r\n\r\nclass UserContainer extends Component{\r\n\r\n    componentWillMount() {\r\n        this.props.fetchUsersAction();\r\n    }\r\n\r\n    render() {\r\n\r\n        \r\n        const { users } = this.props\r\n        return (\r\n            <div>\r\n                {\r\n                    users.loading ? (\r\n                        <h2>Loading...</h2>\r\n                    ) : users.error ? (\r\n                    <h2>Щось пішло не так: {users.error}</h2>\r\n                    ) : (\r\n                        <div>\r\n                            <div className=\"users-wrapper\">\r\n                                {users.map((user, index) => \r\n                                <div key={index} className=\"user-container\">\r\n                                    <img className=\"user-avatar\" src={user.avatar} alt=\"avatar\"/>\r\n                                    <div className=\"user-name\"> {user.name} </div>\r\n                                    <div className=\"user-username\"> {user.username} </div>\r\n                                </div>)}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    console.log(store, store.user.users);\r\n    return {\r\n        users: store.user.users\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         fetchUsers: () => dispatch(fetchUsers())\r\n//     }\r\n// }\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {fetchUsersAction: fetchUsersAction}\r\n)(UserContainer);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './styles.css';\r\n\r\nclass AddUser extends Component {\r\n\r\n    state = {\r\n        name: \"\",\r\n        username: {\r\n            value: '',\r\n            isValid: false,\r\n            validationRules: {\r\n                regExp: /^([a-zA-Z0-9-])$/, //має почнатися з @\r\n            }\r\n        },\r\n        avatar: \"\", //посилання\r\n    }\r\n\r\n    selectName = (event) => {\r\n        this.setState({\r\n          name: event.currentTarget.value,\r\n        });\r\n    };\r\n\r\n    usernameValidation = username => this.state.username.validationRules.regExp.test(String(username));\r\n\r\n    selectUsername = (event) => {\r\n        this.setState({\r\n            username: {\r\n                ...this.state.username,\r\n                value: event.target.value,\r\n                // isValid: this.usernameValidation(event.target.value)\r\n            }\r\n        })\r\n    };\r\n\r\n    selectAvatar = (event) => {\r\n        this.setState({\r\n          avatar: event.currentTarget.value,\r\n        });\r\n    };\r\n\r\n    resetInputs = () => {\r\n        this.setState({\r\n            name: \"\",\r\n            username: {...this.state.username, value: \"\", isValid: false},\r\n            avatar: \"\",\r\n        })\r\n    };\r\n\r\n    addNewUser = () => {\r\n        let newUserData = {\r\n            name: this.state.name,\r\n            username: `@${this.state.username.value}`,\r\n            avatar: this.state.avatar,\r\n        }\r\n        console.log(newUserData, this.state);\r\n        // postUserAction(newUserData);\r\n        this.resetInputs();\r\n    };\r\n\r\n    render () {\r\n        return(\r\n            <div className=\"new-post-form-wrapper\">\r\n                <div className=\"inputs-wrapper\">\r\n                    <input \r\n                        type=\"name\"\r\n                        placeholder=\"Type your name here\" \r\n                        className=\"new-post-items new-post-name\"\r\n                        value={this.state.name}\r\n                        // isEmpty={!this.state.name.length}\r\n                        onChange={this.selectName.bind(this)} />\r\n                    <div className=\"username-wrapper\">@ \r\n                        <input\r\n                            type=\"username\"\r\n                            placeholder=\"Type your username here\" \r\n                            className=\"new-post-items new-post-username\"\r\n                            value={this.state.username.value} \r\n                            // isEmpty={!this.state.username.value.length}\r\n                            onChange={this.selectUsername.bind(this)} />\r\n                    </div>\r\n                    <input\r\n                        type=\"url\"\r\n                        placeholder=\"Paste your avatar here\" \r\n                        className=\"new-post-items new-post-avatar\"\r\n                        value={this.state.avatar}\r\n                        // isEmpty={!this.state.avatar.value.length}\r\n                        onChange={this.selectAvatar.bind(this)} />\r\n                </div>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"submit-button\"\r\n                    onClick={() => {\r\n                        // this.addNewUser.bind(this);\r\n                        this.addNewUser()\r\n                        \r\n                        }}>Add new user</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// const mapStateToProps = (store, ownProps) => {\r\n//     console.log(store, store.user.users);\r\n//     return {\r\n//         users: store.user.users\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         fetchUsers: () => dispatch(fetchUsers())\r\n//     }\r\n// }\r\n\r\n// export default connect(\r\n//     mapStateToProps,\r\n//     {fetchUsersAction: fetchUsersAction}\r\n// )(UserContainer);\r\n\r\nexport default AddUser;\r\n\r\n// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// // import addPostReducer from '../redux/add-post-reducer';\r\n// import addPost from '../redux/add-post-action';\r\n// import {passNewDataToPost, selectName} from '../redux/post-interactions-action';\r\n\r\n// let users = [\r\n//     {\r\n//         isActive: 'false',\r\n//         id: 5,\r\n//         username: 'Хіната Іванович',\r\n//     },\r\n//     {\r\n//         isActive: 'false',\r\n//         id: 6,\r\n//         username: 'Цукі Григорович',\r\n//     },\r\n//     {\r\n//         isActive: 'false',\r\n//         id: 7,\r\n//         username: 'Даічі Мирославович',\r\n//     },\r\n//     {\r\n//         isActive: 'false',\r\n//         id: 8,\r\n//         username: 'Ю Нішиноя Батькович',\r\n//     },\r\n// ];\r\n\r\n// // let date = setDate();\r\n\r\n// class NewPostForm extends Component {\r\n\r\n//     state = {\r\n//         name: \"\",\r\n//         content: {\r\n//             text: \"\",\r\n//           },\r\n//           image: {\r\n//             src: \"\",\r\n//           },\r\n//         //   date: setDate(),\r\n//       };\r\n    \r\n//     selectName = (event) => {\r\n//         this.setState({\r\n//           name: event.currentTarget.value,\r\n//         });\r\n//     };\r\n    \r\n//     selectImage = (event) => {\r\n//         this.setState({ image: { ...this.state.image, src: event.currentTarget.value,} });\r\n//     };\r\n\r\n//     typedText = (event) => {\r\n//         this.setState({ content: { ...this.state.content, text: event.currentTarget.value,} });\r\n//     };\r\n\r\n//     addNewPostFn = (e) => {\r\n//         this.props.addPost(this.state);\r\n//     }\r\n\r\n//     render() {\r\n\r\n//         return (\r\n//             <div className=\"new-post-form-wrapper\">\r\n//                 <div className=\"inputs-wrapper\">\r\n//                     <div className=\"new-user-post\">\r\n//                         <label className=\"new-user-label\">Choose a username:</label>\r\n//                         <select className=\"new-user-option\" onChange={this.selectName.bind(this)} value={this.state.name} name=\"user\" id=\"users\">\r\n//                             {users.map((user,index) => (\r\n//                                 <option className=\"new-user-option\"  key={user.id} state={user.isActive} >{user.username}</option>\r\n//                             ))}\r\n//                         </select>\r\n//                         <input className=\"new-post-items image-link\" onChange={this.selectImage.bind(this)} value={this.state.image.src} type=\"url\" name=\"url\" placeholder=\"Paste a photo link here or choose one\" list=\"defaultURLs\"/>\r\n//                         <datalist id=\"defaultURLs\">\r\n//                             <option value=\"https://s.yimg.com/aah/computergear/r2d2-dalek-loved-star-trek-t-shirt-26.gif\"/>\r\n//                             <option value=\"https://www.geekalerts.com/u/Doctor-Who-Star-Wars-Darthmen-T-Shirt.jpg\"/>\r\n//                             <option value=\"https://i.pinimg.com/originals/80/8b/ce/808bce96f0e3b7149bbae9a81c307e21.png\"/>\r\n//                         </datalist>\r\n//                         <textarea className=\"textarea new-post-items\" name=\"addText\" id=\"\" onChange={this.typedText.bind(this)} value={this.state.content.text} rows=\"5\" placeholder=\"type your message here\"></textarea>\r\n//    {/* onChange={(e) => this.props.addPost(e.target.value)}  */}\r\n//                     </div>\r\n//                     <div className=\"new-post-btn-wrapper\">\r\n//                         <button type=\"button\" className=\"new-post-btn new-post-items\" onClick={this.addNewPostFn}>Add new post</button>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// const getStateToProps = (state) => {\r\n//     return {\r\n//         post: state.addPostReducer,\r\n//         // data: state.getNewDataReducer,\r\n//     }\r\n// }\r\n\r\n// const getDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         addPost: e => dispatch(addPost(e)),\r\n//         // passNewDataToPost: () => dispatch(passNewDataToPost())\r\n//     }\r\n// }\r\n\r\n// export default connect(getStateToProps, getDispatchToProps)(NewPostForm);","import axios from 'axios';\r\nimport {\r\n    FETCH_TWEETS_REQUEST,\r\n    FETCH_TWEETS_SUCCESS,\r\n    FETCH_TWEETS_FAIL\r\n} from '../types';\r\n\r\nexport const fetchTweetsRequest = () => {\r\n    return {\r\n        type: FETCH_TWEETS_REQUEST,\r\n    }\r\n}\r\n\r\nexport const fetchTweetsSuccess = (tweets) => {\r\n    return {\r\n        type: FETCH_TWEETS_SUCCESS,\r\n        payload: tweets,\r\n    }\r\n}\r\n\r\nexport const fetchTweetsFail = (error) => {\r\n    return {\r\n        type: FETCH_TWEETS_FAIL,\r\n        payload: error,\r\n    }\r\n}\r\n\r\nexport const fetchTweetsAction = () => {\r\n    return async (dispatch) => {\r\n        dispatch(fetchTweetsRequest)\r\n        await axios.get('https://cors-anywhere.herokuapp.com/http://domer.tech:9999/tweets/')\r\n        \r\n        .then((response) => {\r\n            const tweets = response.data.data;\r\n            dispatch(fetchTweetsSuccess(tweets));\r\n        })\r\n        .catch((error) => {\r\n            const errorMsg = error.message;\r\n            dispatch(fetchTweetsFail(errorMsg));\r\n        })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchTweetsAction } from '../../redux/actions/add-tweet-action';\r\nimport './styles.css';\r\n\r\nclass TweetsList extends Component {\r\n\r\n    componentWillMount() {\r\n        this.props.fetchTweetsAction();\r\n    }\r\n\r\n    render() {\r\n        const { tweets } = this.props\r\n\r\n        return(\r\n            <div className=\"tweets-list-wrapper\">\r\n                So, there will be tweets!\r\n                {tweets.map((tweet, i) => \r\n                <div key={i} className=\"tweets-container\">\r\n                    <p>{tweet.content}</p>\r\n                    <img className=\"tweets-image\" src={tweet.image} alt=\"tweet\"/>\r\n                </div>)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    console.log(store, store.tweet.tweets);\r\n    return {\r\n        tweets: store.tweet.tweets\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {fetchTweetsAction: fetchTweetsAction}\r\n)(TweetsList);","import axios from 'axios';\r\nimport {\r\n    POST_TWEET_REQUEST,\r\n    POST_TWEET_SUCCESS,\r\n    POST_TWEET_FAIL\r\n} from '../types';\r\n\r\nexport const postTweetThunkCreator = async (payload, dispatch) => {\r\n    \r\n    console.log(payload);\r\n    await axios.post('https://cors-anywhere.herokuapp.com/http://domer.tech:9999/tweets/', { ...payload })\r\n    // .then(\r\n    //                 response => dispatch({\r\n    //                     type: POST_TWEET_SUCCESS,\r\n    //                     payload: response,\r\n    //                 }),\r\n    //                 error => dispatch({\r\n    //                     type: POST_TWEET_FAIL,\r\n    //                     payload: error.message,\r\n    //                 })\r\n    //             )\r\n}\r\n\r\n// export const postTweetThunkCreator = (payload) => {\r\n//     console.log(payload);\r\n//     return async (dispatch, payload) => {\r\n//         dispatch({type: POST_TWEET_REQUEST})\r\n//         console.log('current state: ', payload);\r\n\r\n//         await axios.post('http://domer.tech:9999/tweets/', { ...payload })\r\n//         .then(\r\n//             response => dispatch({\r\n//                 type: POST_TWEET_SUCCESS,\r\n//                 payload: response,\r\n//             }),\r\n//             error => dispatch({\r\n//                 type: POST_TWEET_FAIL,\r\n//                 payload: error.message,\r\n//             })\r\n//         )\r\n//     }\r\n// }\r\n","import React, { Component } from 'react';\r\nimport { fetchUsersAction } from '../../redux/actions/add-user-action';\r\nimport { fetchTweetsAction } from '../../redux/actions/add-tweet-action';\r\nimport { connect } from 'react-redux';\r\nimport { postTweetThunkCreator } from '../../redux/actions/post-tweet-action';\r\nimport './styles.css';\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        users: store.user.users,\r\n        tweets: store.tweet.tweets,\r\n    }\r\n}\r\n\r\n// const {tweets} = this.props;\r\nclass AddTweet extends Component {\r\n\r\n    state = {\r\n        content: '',\r\n        image: '',\r\n        name: '',\r\n        // id: tweets.length,\r\n        // userId: tweets.length,\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.props.fetchUsersAction();\r\n        this.props.fetchTweetsAction();\r\n    }\r\n\r\n    selectContent = (event) => {\r\n        this.setState({\r\n            content: event.currentTarget.value,\r\n        })\r\n    }\r\n    \r\n    selectImage = (event) => {\r\n        this.setState({\r\n            image: event.target.value,\r\n        })\r\n    }\r\n\r\n    selectName = (event) => {\r\n        this.setState({\r\n            name: event.currentTarget.value,\r\n        });\r\n    }\r\n\r\n    resetInputs = () => {\r\n        this.setState({\r\n            content: '',\r\n            image: '',\r\n        })\r\n    }\r\n\r\n    addNewTweet = () => {\r\n        postTweetThunkCreator(this.state);\r\n        this.resetInputs();\r\n    }\r\n\r\n    render() {\r\n        const { users, tweets } = this.props;\r\n        console.log('Needed one users: ', users, 'tweets: ', tweets);\r\n        return(\r\n            <div className=\"add-tweet-wrapper\">\r\n                <label className=\"new-tweet-items\">Choose a user:</label>\r\n                        <select className=\"new-tweet-items\" onChange={this.selectName.bind(this)} value={this.state.user} name=\"user\" id=\"users\">\r\n                            {users.map((user,index) => (\r\n                                <option className=\"new-user-option\"  key={index} >{user.name}</option>\r\n                            ))}\r\n                        </select>\r\n                <div className=\"inputs-wrapper\">\r\n                    <input \r\n                        type=\"content\"\r\n                        placeholder=\"Type your messare here\" \r\n                        className=\"new-tweet-items new-tweet-content\"\r\n                        value={this.state.content}\r\n                        onChange={this.selectContent.bind(this)} />\r\n                    <input\r\n                        type=\"url\"\r\n                        placeholder=\"Paste your image here\" \r\n                        className=\"new-tweet-items new-tweet-image\"\r\n                        value={this.state.image}\r\n                        onChange={this.selectImage.bind(this)} />\r\n                </div>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"submit-button\"\r\n                    onClick={() => {\r\n                        this.addNewTweet()\r\n                    }}\r\n                >Add new tweet</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {fetchUsersAction: fetchUsersAction,\r\n        fetchTweetsAction: fetchTweetsAction},\r\n)(AddTweet);","import React from 'react';\nimport './App.css';\nimport TopPanel from './components/top-panel/top-panel';\nimport {HashRouter as Router,Switch, Route, Redirect} from \"react-router-dom\";\n// import { useStore } from 'react-redux';\nimport UserContainer from './components/users/users';\nimport AddUser from './components/add-user/add-user';\nimport TweetsList from './components/tweets-list/tweets-list';\nimport AddTweet from './components/add-tweet/add-tweet';\n\n\nexport const MENU = [\n    {\n    title: \"Users\",\n    path: \"/users\",\n    component: UserContainer,\n    index: 1,\n  }, {\n    title: \"Add user\",\n    path: \"/add-user\",\n    component: AddUser,\n    index: 2,\n  },{\n    title: \"Tweets list\",\n    path: \"/tweets-list\",\n    component: TweetsList,\n    index: 3,\n  },{\n    title: \"Add tweet\",\n    path: \"/add-tweet\",\n    component: AddTweet,\n    index: 4,\n  }, \n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <TopPanel/>\n        <Switch>\n            {MENU.map(({path, component, index}) => (\n                <Route path={path} key={index} component={component}/>\n            ))}\n            <Route path=\"/\" exact render={() => <Redirect to=\"/users\"/>}/>  \n            <Route exact render={() => <Redirect to=\"/users\"/>}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}